/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAyalaArgs } from "./CreateAyalaArgs";
import { UpdateAyalaArgs } from "./UpdateAyalaArgs";
import { DeleteAyalaArgs } from "./DeleteAyalaArgs";
import { AyalaFindManyArgs } from "./AyalaFindManyArgs";
import { AyalaFindUniqueArgs } from "./AyalaFindUniqueArgs";
import { Ayala } from "./Ayala";
import { Test } from "../../test/base/Test";
import { AyalaService } from "../ayala.service";

@graphql.Resolver(() => Ayala)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AyalaResolverBase {
  constructor(
    protected readonly service: AyalaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ayala",
    action: "read",
    possession: "any",
  })
  async _ayalasMeta(
    @graphql.Args() args: AyalaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ayala])
  @nestAccessControl.UseRoles({
    resource: "Ayala",
    action: "read",
    possession: "any",
  })
  async ayalas(@graphql.Args() args: AyalaFindManyArgs): Promise<Ayala[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ayala, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ayala",
    action: "read",
    possession: "own",
  })
  async ayala(
    @graphql.Args() args: AyalaFindUniqueArgs
  ): Promise<Ayala | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ayala)
  @nestAccessControl.UseRoles({
    resource: "Ayala",
    action: "create",
    possession: "any",
  })
  async createAyala(@graphql.Args() args: CreateAyalaArgs): Promise<Ayala> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        test: args.data.test
          ? {
              connect: args.data.test,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ayala)
  @nestAccessControl.UseRoles({
    resource: "Ayala",
    action: "update",
    possession: "any",
  })
  async updateAyala(
    @graphql.Args() args: UpdateAyalaArgs
  ): Promise<Ayala | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          test: args.data.test
            ? {
                connect: args.data.test,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ayala)
  @nestAccessControl.UseRoles({
    resource: "Ayala",
    action: "delete",
    possession: "any",
  })
  async deleteAyala(
    @graphql.Args() args: DeleteAyalaArgs
  ): Promise<Ayala | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Test, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Test",
    action: "read",
    possession: "any",
  })
  async test(@graphql.Parent() parent: Ayala): Promise<Test | null> {
    const result = await this.service.getTest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
